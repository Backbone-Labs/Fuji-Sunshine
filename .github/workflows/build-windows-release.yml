name: Build Windows Release

on:
  workflow_dispatch:  # Manual trigger
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

permissions:
  contents: write  # Needed to create releases

jobs:
  build-windows:
    name: Build Windows AMD64
    runs-on: windows-2022
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: >-
            wget
            git
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-cppwinrt
            mingw-w64-ucrt-x86_64-curl-winssl
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-graphviz
            mingw-w64-ucrt-x86_64-MinHook
            mingw-w64-ucrt-x86_64-miniupnpc
            mingw-w64-ucrt-x86_64-nlohmann-json
            mingw-w64-ucrt-x86_64-nodejs
            mingw-w64-ucrt-x86_64-nsis
            mingw-w64-ucrt-x86_64-onevpl
            mingw-w64-ucrt-x86_64-openssl
            mingw-w64-ucrt-x86_64-opus
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-boost
            mingw-w64-ucrt-x86_64-x265

      - name: Install Doxygen
        env:
          DOXYGEN_VERSION: "1.11.0"
        shell: pwsh
        run: |
          $doxy_ver = $env:DOXYGEN_VERSION
          $_doxy_ver = $doxy_ver.Replace(".", "_")
          Invoke-WebRequest -Uri "https://github.com/doxygen/doxygen/releases/download/Release_${_doxy_ver}/doxygen-${doxy_ver}-setup.exe" -OutFile "doxygen-setup.exe"
          Start-Process -FilePath .\doxygen-setup.exe -ArgumentList '/VERYSILENT' -Wait -NoNewWindow
          Remove-Item -Path doxygen-setup.exe

      - name: Build Sunshine
        run: |
          # Create build directory
          mkdir -p build
          cd build

          # Configure with CMake
          cmake \
            -G "MinGW Makefiles" \
            -DCMAKE_BUILD_TYPE=Release \
            -DSUNSHINE_ASSETS_DIR=assets \
            -DBUILD_TESTS=OFF \
            -DSUNSHINE_PUBLISHER_NAME='${{ github.repository_owner }}' \
            -DSUNSHINE_PUBLISHER_WEBSITE='https://github.com/${{ github.repository }}' \
            -DSUNSHINE_PUBLISHER_ISSUE_URL='https://github.com/${{ github.repository }}/issues' \
            ..

          # Build
          mingw32-make -j$(nproc)

          # Check if sunshine.exe was created
          if [ -f sunshine.exe ]; then
            echo "✅ sunshine.exe built successfully"
            ls -la sunshine.exe
          else
            echo "❌ sunshine.exe not found"
            exit 1
          fi

      - name: Package Sunshine
        run: |
          cd build

          # Create artifacts directory
          mkdir -p ../artifacts
          mkdir -p ../artifacts/portable

          # First, collect raw exe and required DLLs for portable version
          echo "📦 Collecting portable files..."
          if [ -f sunshine.exe ]; then
            cp sunshine.exe ../artifacts/portable/
            echo "✅ Copied sunshine.exe"
          fi

          # Copy required DLLs from MinGW
          for dll in libcrypto*.dll libssl*.dll libopus*.dll libminiupnpc*.dll libboost*.dll; do
            find /mingw64/bin -name "$dll" -exec cp {} ../artifacts/portable/ \; 2>/dev/null || true
          done

          # Copy assets directory if it exists
          if [ -d assets ]; then
            cp -r assets ../artifacts/portable/
            echo "✅ Copied assets directory"
          fi

          # Create portable zip from raw files with the expected name
          cd ../artifacts/portable
          zip -r ../Sunshine-Windows-AMD64-portable.zip *
          cd ../../build
          echo "✅ Created portable zip"

          # Now create installer and standard portable via CPack
          cpack -G NSIS || echo "NSIS packaging failed, continuing..."
          cpack -G ZIP || echo "ZIP packaging failed, continuing..."

          # Move CPack outputs
          if [ -f cpack_artifacts/Sunshine.exe ]; then
            mv cpack_artifacts/Sunshine.exe ../artifacts/Sunshine-Windows-installer.exe
            echo "✅ Created installer"
          fi

          if [ -f cpack_artifacts/Sunshine.zip ]; then
            mv cpack_artifacts/Sunshine.zip ../artifacts/Sunshine-Windows-portable.zip
            echo "✅ Created CPack portable zip"
          fi

          # Also provide just the raw exe separately for easy access
          if [ -f ../artifacts/portable/sunshine.exe ]; then
            cp ../artifacts/portable/sunshine.exe ../artifacts/sunshine.exe
            echo "✅ Copied raw sunshine.exe to artifacts root"
          fi

          # List all artifacts
          echo "📦 All artifacts created:"
          ls -la ../artifacts/
          echo "📦 Portable directory contents:"
          ls -la ../artifacts/portable/ || true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sunshine-windows-build
          path: |
            artifacts/sunshine.exe
            artifacts/Sunshine-*.exe
            artifacts/Sunshine-*.zip
            artifacts/portable/
          if-no-files-found: error

      - name: Upload Raw Exe Separately
        uses: actions/upload-artifact@v4
        with:
          name: sunshine-raw-exe
          path: artifacts/sunshine.exe
          if-no-files-found: error

      - name: Upload Portable Bundle
        uses: actions/upload-artifact@v4
        with:
          name: sunshine-portable-bundle
          path: artifacts/Sunshine-Windows-AMD64-portable.zip
          if-no-files-found: warn

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/sunshine.exe
            artifacts/Sunshine-*.exe
            artifacts/Sunshine-*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Sunshine Fork Windows Build

            This release includes:
            - `sunshine.exe` - Raw executable only (for bundling with other apps)
            - `Sunshine-Windows-installer.exe` - Windows installer (recommended for standalone use)
            - `Sunshine-Windows-portable.zip` - CPack portable version
            - `Sunshine-Windows-portable-raw.zip` - Raw portable bundle with exe + DLLs (for Fuji integration)

            ### For Fuji Integration
            Use `Sunshine-Windows-portable-raw.zip` which contains:
            - sunshine.exe
            - Required DLL dependencies
            - Assets directory
            - No installation needed, just extract and run

            ### For Standalone Use

            **Option 1: Installer (Recommended)**
            1. Download `Sunshine-Windows-installer.exe`
            2. Run the installer and follow the prompts

            **Option 2: Portable**
            1. Download `Sunshine-Windows-portable.zip` or `Sunshine-Windows-portable-raw.zip`
            2. Extract to your desired location
            3. Run `sunshine.exe`

            **Option 3: Raw Executable**
            1. Download `sunshine.exe` (requires manual dependency management)
            2. Place in directory with required DLLs

            ### Changes
            See commit history for detailed changes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
